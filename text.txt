Passo a passo dos comandos necessários para execução
1. Criar banco de dados
  CREATE TABLE materia (
    subject_id INT PRIMARY KEY AUTO_INCREMENT,
    subject_name VARCHAR(255),
    professor_id INT,
    credit_hours INT
  );
2. Digitar "npm init" para criar o package.json
3. Digitar "npm install express cors nodemon mysql" para instalar os frameworks
4. Digitar "node server.js" para ativar o servidor
5. Abrir Chrome o arquivo de index.html


banco de dados professor
CREATE TABLE Professor (
    Id_prof INT PRIMARY KEY NOT NULL,
    Nome VARCHAR(255) NOT NULL CHECK (Nome NOT REGEXP '[0-9]'),
    Email_constitucional VARCHAR(255) NOT NULL,
    Materia_Lecionada VARCHAR(255) NOT NULL,
    CPF VARCHAR(14) NOT NULL CHECK (CPF NOT REGEXP '[a-zA-Z]'),
    Telefone VARCHAR(15) NOT NULL CHECK (Telefone NOT REGEXP '[a-zA-Z]'),
    Data_Nascimento VARCHAR (128) NOT NULL,
    Email_pessoal VARCHAR(255) NOT NULL,
    Endereco_Completo VARCHAR(255) NOT NULL
);





###データベース　スクリプト
-- escolaはいらないかも？
-- Escolaテーブルを作成
CREATE TABLE Escola (
    id_escola INT AUTO_INCREMENT PRIMARY KEY,
    nome_escola VARCHAR(255),
    email_escola VARCHAR(255),
    senha_escola VARCHAR(255)
);


-- Professorテーブルを作成
CREATE TABLE Professor (
    id_prof INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(255),
    email_prof VARCHAR(255),
    materia_leci VARCHAR(255),
    CPF VARCHAR(14),
    telefone VARCHAR(20),
    data_de_nascimento DATE,
    email_pass VARCHAR(255),
    endereco_prof TEXT
);

-- Disciplinaテーブルを作成
CREATE TABLE Disciplina (
    id_disciplina INT AUTO_INCREMENT PRIMARY KEY,
    disciplina VARCHAR(255),
    id_prof INT,
    FOREIGN KEY (id_prof) REFERENCES Professor(id_prof)
);

-- Turmaテーブルを作成
CREATE TABLE Turma (
    id_turma INT AUTO_INCREMENT PRIMARY KEY,
    nome_turma VARCHAR(255)
);

-- Responsavelテーブルを作成
CREATE TABLE Responsavel (
    id_resp INT AUTO_INCREMENT PRIMARY KEY,
    nome_pesp VARCHAR(255),
    endereco_pesp VARCHAR(255),
    telefone_pesp VARCHAR(20),
    email_pesp VARCHAR(255)
);

-- Alunoテーブルを作成
CREATE TABLE Aluno (
    id_aluno INT AUTO_INCREMENT PRIMARY KEY,
    nome_aluno  VARCHAR(255),
    ra_aluno  VARCHAR(255), 
    endereco_aluno  VARCHAR(255),
    telefone_aluno  VARCHAR(255),
    email_aluno  VARCHAR(255),
    id_turma INT,
    FOREIGN KEY (id_turma) REFERENCES Turma(id_turma),
    nacimento_aluno VARCHAR(255)
);

-- AlunoとResponsavelの多対多の関係を持つための関連テーブル
CREATE TABLE Aluno_Responsavel (
    id_aluno INT,
    id_resp INT,
    FOREIGN KEY (id_aluno) REFERENCES Aluno(id_aluno),
    FOREIGN KEY (id_resp) REFERENCES Responsavel(id_resp),
    PRIMARY KEY (id_aluno, id_resp)
);

-- AlunoとDisciplinaの多対多の関係を持つための関連テーブル + 成績等の管理
CREATE TABLE Nota (
    id_nota INT AUTO_INCREMENT PRIMARY KEY,
    id_aluno INT,
    id_disciplina INT,
    FOREIGN KEY (id_aluno) REFERENCES aluno(id_aluno),
    FOREIGN KEY (id_disciplina) REFERENCES Disciplina(id_disciplina),
    n1 REAL,
    AI REAL,
    AP REAL,
    faltas INT
);





####中身のデータ、試験用に
-- Professorテーブルにレコードを追加
INSERT INTO Professor (nome, email_prof, materia_leci, CPF, telefone, data_de_nascimento, email_pass, endereco_prof) VALUES
('John Doe', 'john@example.com', 'Mathematics', '123.456.789-01', '(123) 456-7890', '1980-01-01', 'john_personal@example.com', '123 Main St'),
('Jane Smith', 'jane@example.com', 'Physics', '987.654.321-09', '(987) 654-3210', '1975-05-10', 'jane_personal@example.com', '456 Elm St'),
('Michael Johnson', 'michael@example.com', 'Chemistry', '456.789.012-34', '(456) 789-0123', '1990-12-15', 'michael_personal@example.com', '789 Oak St');

INSERT INTO Professor (id_prof, nome, email_consitucional, materia_leci, CPF, telefone, data_de_nascimento, email_pess, endereco_completo) VALUES (4, 'AAAAAAAAA', 'AAAAAAA@example.com', 'AAAAA', '999.999.999-99', '(456) 789-0123', '1990-12-15', 'AAAAAAAAAAAAl@example.com', '789 Oak St')

-- Disciplinaテーブルにレコードを追加
INSERT INTO Disciplina (id_disciplina, disciplina, id_prof) VALUES
(1, 'Algebra', 1),
(2, 'Quantum Mechanics', 2),
(3, 'Organic Chemistry', 3);

-- Notaテーブルにレコードを追加
INSERT INTO Nota (id_aluno, id_disciplina, n1, AI, AP, faltas) VALUES
    (1, 1, 8.5, 9.0, 8.0, 2),
    (1, 2, 7.0, 8.5, 9.0, 1),
    (2, 1, 9.0, 7.5, 8.5, 3),
    (2, 2, 8.0, 9.0, 7.5, 0);



SELECT *
FROM Professor
JOIN Disciplina ON Professor.id_prof = Disciplina.id_prof;
