Passo a passo dos comandos necessários para execução
1. Criar banco de dados
  CREATE TABLE materia (
    subject_id INT PRIMARY KEY AUTO_INCREMENT,
    subject_name VARCHAR(255),
    professor_id INT,
    credit_hours INT
  );
2. Digitar "npm init" para criar o package.json
3. Digitar "npm install express cors nodemon mysql" para instalar os frameworks
4. Digitar "node server.js" para ativar o servidor
5. Abrir Chrome o arquivo de index.html


banco de dados professor
CREATE TABLE Professor (
    Id_prof INT PRIMARY KEY NOT NULL,
    Nome VARCHAR(255) NOT NULL CHECK (Nome NOT REGEXP '[0-9]'),
    Email_constitucional VARCHAR(255) NOT NULL,
    Materia_Lecionada VARCHAR(255) NOT NULL,
    CPF VARCHAR(14) NOT NULL CHECK (CPF NOT REGEXP '[a-zA-Z]'),
    Telefone VARCHAR(15) NOT NULL CHECK (Telefone NOT REGEXP '[a-zA-Z]'),
    Data_Nascimento VARCHAR (128) NOT NULL,
    Email_pessoal VARCHAR(255) NOT NULL,
    Endereco_Completo VARCHAR(255) NOT NULL
);





###データベース　スクリプト
-- escolaはいらないかも？
-- Escolaテーブルを作成
CREATE TABLE Escola (
    id_escola INT AUTO_INCREMENT PRIMARY KEY,
    nome_escola VARCHAR(255),
    email_escola VARCHAR(255),
    senha_escola VARCHAR(255)
);


-- Professorテーブルを作成
CREATE TABLE Professor (
    id_prof INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(255),
    email_prof VARCHAR(255),
    materia_leci VARCHAR(255),
    CPF VARCHAR(14),
    telefone VARCHAR(20),
    data_de_nascimento DATE,
    email_pass VARCHAR(255),
    endereco_prof TEXT
);

-- Disciplinaテーブルを作成
CREATE TABLE Disciplina (
    id_disciplina INT AUTO_INCREMENT PRIMARY KEY,
    disciplina VARCHAR(255),
    id_prof INT,
    FOREIGN KEY (id_prof) REFERENCES Professor(id_prof)
);

-- Turmaテーブルを作成
CREATE TABLE Turma (
    id_turma INT AUTO_INCREMENT PRIMARY KEY,
    nome_turma VARCHAR(255)
);

-- Responsavelテーブルを作成
CREATE TABLE Responsavel (
    id_resp INT AUTO_INCREMENT PRIMARY KEY,
    nome_pesp VARCHAR(255),
    endereco_pesp VARCHAR(255),
    telefone_pesp VARCHAR(20),
    email_pesp VARCHAR(255)
);

-- Alunoテーブルを作成
CREATE TABLE Aluno (
    id_aluno INT AUTO_INCREMENT PRIMARY KEY,
    nome_aluno  VARCHAR(255),
    ra_aluno  VARCHAR(255), 
    endereco_aluno  VARCHAR(255),
    telefone_aluno  VARCHAR(255),
    email_aluno  VARCHAR(255),
    id_turma INT,
    FOREIGN KEY (id_turma) REFERENCES Turma(id_turma),
    nacimento_aluno VARCHAR(255)
);

-- AlunoとResponsavelの多対多の関係を持つための関連テーブル
CREATE TABLE Aluno_Responsavel (
    id_aluno INT,
    id_resp INT,
    FOREIGN KEY (id_aluno) REFERENCES Aluno(id_aluno),
    FOREIGN KEY (id_resp) REFERENCES Responsavel(id_resp),
    PRIMARY KEY (id_aluno, id_resp)
);

-- AlunoとDisciplinaの多対多の関係を持つための関連テーブル + 成績等の管理
CREATE TABLE Nota (
    id_nota INT AUTO_INCREMENT PRIMARY KEY,
    id_aluno INT,
    id_disciplina INT,
    FOREIGN KEY (id_aluno) REFERENCES aluno(id_aluno),
    FOREIGN KEY (id_disciplina) REFERENCES Disciplina(id_disciplina),
    n1 REAL,
    AI REAL,
    AP REAL,
    faltas INT
);





####中身のデータ、試験用に
-- Professorテーブルにレコードを追加
INSERT INTO Professor (nome, email_prof, materia_leci, CPF, telefone, data_de_nascimento, email_pass, endereco_prof) VALUES
('John Doe', 'john@example.com', 'Mathematics', '123.456.789-01', '(123) 456-7890', '1980-01-01', 'john_personal@example.com', '123 Main St'),
('Jane Smith', 'jane@example.com', 'Physics', '987.654.321-09', '(987) 654-3210', '1975-05-10', 'jane_personal@example.com', '456 Elm St'),
('Michael Johnson', 'michael@example.com', 'Chemistry', '456.789.012-34', '(456) 789-0123', '1990-12-15', 'michael_personal@example.com', '789 Oak St');

-- Disciplinaテーブルにレコードを追加
INSERT INTO Disciplina (disciplina, id_prof) VALUES
('Algebra', 1),
('Quantum Mechanics', 2),
('Organic Chemistry', 3);

-- Turmaテーブルへのデータ挿入
INSERT INTO Turma (nome_turma)
VALUES 
    ('Turma A'),
    ('Turma B'),
    ('Turma C'),
    ('Turma D'),
    ('Turma E');

-- Responsavelテーブルへのデータ挿入
INSERT INTO Responsavel (nome_pesp, endereco_pesp, telefone_pesp, email_pesp)
VALUES 
    ('Maria Silva', 'Rua ABC, 123', '555-1234', 'maria.silva@example.com'),
    ('José Santos', 'Av. XYZ, 456', '555-5678', 'jose.santos@example.com'),
    ('Ana Oliveira', 'Praça 123, Apt 101', '555-9012', 'ana.oliveira@example.com'),
    ('Carlos Pereira', 'Alameda ABC, 789', '555-3456', 'carlos.pereira@example.com'),
    ('Fernanda Souza', 'Estrada XYZ, 987', '555-7890', 'fernanda.souza@example.com');

INSERT INTO Aluno (nome_aluno, ra_aluno, endereco_aluno, telefone_aluno, email_aluno, id_turma, nacimento_aluno)
VALUES 
    ('John Doe', '123456', '123 Main Street', '555-1234', 'john.doe@example.com', 1, '1995-05-15'),
    ('Jane Smith', '789012', '456 Elm Street', '555-5678', 'jane.smith@example.com', 2, '1996-07-20'),
    ('Michael Johnson', '345678', '789 Oak Street', '555-9012', 'michael.johnson@example.com', 1, '1994-12-10'),
    ('Emily Brown', '901234', '321 Pine Street', '555-3456', 'emily.brown@example.com', 3, '1997-03-25'),
    ('David Wilson', '567890', '654 Maple Street', '555-7890', 'david.wilson@example.com', 2, '1993-08-05');


-- Notaテーブルにレコードを追加
INSERT INTO Nota (id_aluno, id_disciplina, n1, AI, AP, faltas) VALUES
    (1, 1, 8.5, 9.0, 8.0, 2),
    (1, 2, 7.0, 8.5, 9.0, 1),
    (2, 1, 9.0, 7.5, 8.5, 3),
    (2, 2, 8.0, 9.0, 7.5, 0);

-- Responsavelテーブルにレコードを追加
INSERT INTO Responsavel (nome_pesp, endereco_pesp, telefone_pesp, email_pesp) 
VALUES 
('John Doe', '123 Main Street, City, Country', '+1234567890', 'john@example.com'),
('Jane Smith', '456 Elm Street, City, Country', '+1987654321', 'jane@example.com'),
('Michael Johnson', '789 Oak Street, City, Country', '+1122334455', 'michael@example.com'),
('AAAAAAA', 'john@example.com', 'Mathematics', '123.456.789-01', '(123) 456-7890', '1980-01-01', 'john_personal@example.com', '123 Main St'),
('BBBBBBBB', 'jane@example.com', 'Physics', '987.654.321-09', '(987) 654-3210', '1975-05-10', 'jane_personal@example.com', '456 Elm St'),
('CCCCCCCC', 'michaDDDDDel@example.com', 'Chemistry', '456.789.012-34', '(456) 789-0123', '1990-12-15', 'michael_personal@example.com', '789 Oak St'),
('DDDDD', 'john@example.com', 'Mathematics', '123.456.789-01', '(123) 456-7890', '1980-01-01', 'john_personal@example.com', '123 Main St'),
('EEEEEEEE', 'jane@example.com', 'Physics', '987.654.321-09', '(987) 654-3210', '1975-05-10', 'jane_personal@example.com', '456 Elm St'),
('FFFFFF', 'michael@example.com', 'Chemistry', '456.789.012-34', '(456) 789-0123', '1990-12-15', 'michael_personal@example.com', '789 Oak St');

-- Aluno_Responsavelテーブルへのデータ挿入
INSERT INTO Aluno_Responsavel (id_aluno, id_resp)
VALUES 
    (1, 1),  -- Aluno ID 1 と Responsavel ID 1 の関係
    (2, 3),  -- Aluno ID 2 と Responsavel ID 3 の関係
    (3, 2),  -- Aluno ID 3 と Responsavel ID 2 の関係
    (4, 4),  -- Aluno ID 4 と Responsavel ID 4 の関係
    (5, 5);  -- Aluno ID 5 と Responsavel ID 5 の関係

-- Notaテーブルへのデータ挿入
INSERT INTO Nota (id_aluno, id_disciplina, n1, AI, AP, faltas)
VALUES 
    (1, 1, 85.5, 78.3, 92.7, 5),   -- Aluno ID 1 の成績
    (2, 2, 90.0, 85.5, 88.2, 2),    -- Aluno ID 2 の成績
    (3, 3, 78.9, 92.4, 79.1, 7),    -- Aluno ID 3 の成績
    (4, 1, 88.2, 79.8, 91.5, 3),    -- Aluno ID 4 の成績
    (5, 2, 92.7, 88.0, 85.6, 1);    -- Aluno ID 5 の成績






SELECT *
FROM Professor
JOIN Disciplina ON Professor.id_prof = Disciplina.id_prof;



-- テーブル 削除
drop table aluno, aluno_responsavel, disciplina, nota, professor, responsavel, turma

-- テーブル 削除
drop table aluno_responsavel, nota, aluno, disciplina, professor, responsavel, turma



app.delete('/disciplinas/:id_disciplina', (req, res) => {
  const id_disciplina = parseInt(req.params.id_disciplina);
  const index = disciplinas.findIndex(disciplina => disciplina.id_disciplina === id_disciplina);
  
  if (index !== -1) {
    // 先に関連するデータを削除する
    connection.query('DELETE FROM nota WHERE id_disciplina=?', [id_disciplina], err => {
      if (err) {
        console.error('Error deleting related data from MySQL: ' + err);
        res.status(500).json({ message: '削除できませんでした' });
      } else {
        // 関連するデータが削除されたら、Disciplinaを削除する
        connection.query('DELETE FROM disciplina WHERE id_disciplina=?', [id_disciplina], err => {
          if (err) {
            console.error('Disciplina table - Error deleting data from MySQL: ' + err);
            res.status(500).json({ message: '削除できませんでした' });
          } else {
            const removedDisciplina = disciplinas.splice(index, 1);
            res.json(removedDisciplina[0]);
          }
        });
      }
    });
  } else {
    res.status(404).json({ message: '見つかりませんでした' });
  }
});
