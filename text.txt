Passo a passo dos comandos necessários para execução
1. Criar banco de dados
  CREATE TABLE materia (
    subject_id INT PRIMARY KEY AUTO_INCREMENT,
    subject_name VARCHAR(255),
    professor_id INT,
    credit_hours INT
  );
2. Digitar "npm init" para criar o package.json
3. Digitar "npm install express cors nodemon mysql" para instalar os frameworks
4. Digitar "node server.js" para ativar o servidor
5. Abrir Chrome o arquivo de index.html


banco de dados professor
CREATE TABLE Professor (
    Id_prof INT PRIMARY KEY NOT NULL,
    Nome VARCHAR(255) NOT NULL CHECK (Nome NOT REGEXP '[0-9]'),
    Email_constitucional VARCHAR(255) NOT NULL,
    Materia_Lecionada VARCHAR(255) NOT NULL,
    CPF VARCHAR(14) NOT NULL CHECK (CPF NOT REGEXP '[a-zA-Z]'),
    Telefone VARCHAR(15) NOT NULL CHECK (Telefone NOT REGEXP '[a-zA-Z]'),
    Data_Nascimento VARCHAR (128) NOT NULL,
    Email_pessoal VARCHAR(255) NOT NULL,
    Endereco_Completo VARCHAR(255) NOT NULL
);




  <script>
    // APIエンドポイントのURL
    const apiUrl = 'http://localhost:3000/materias';

    // 学科リストを表示
    function displayMaterias(materias) {
      const materiaList = document.getElementById('materia-list');
      materiaList.innerHTML = '';
      materias.forEach(materia => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${materia.subject_id}</td>
          <td>${materia.subject_name}</td>
          <td>${materia.professor_id}</td>
          <td>${materia.credit_hours}</td>
          <td>
            <button onclick="updateMateria(${materia.subject_id})">Atualizar</button>
            <button onclick="deleteMateria(${materia.subject_id})">Excluir</button>
          </td>
        `;
        materiaList.appendChild(row);
      });
    }

    // 学科を取得
    function getMaterias() {
      fetch(apiUrl)
        .then(response => response.json())
        .then(data => displayMaterias(data));
    }

    // 新しい学科を追加
    document.getElementById('add-materia-form').addEventListener('submit', function (event) {
      event.preventDefault();
      const subject_name = document.getElementById('subject_name').value;
      const professor_id = document.getElementById('professor_id').value;
      const credit_hours = document.getElementById('credit_hours').value;

      fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          subject_name,
          professor_id,
          credit_hours
        })
      })
        .then(response => response.json())
        .then(data => {
          getMaterias();
          document.getElementById('add-materia-form').reset();
        });
    });

    // 学科を更新
    function updateMateria(subject_id) {
      // 学科IDを取得してフォームに設定
      const updateForm = document.getElementById('update-materia-form');
      updateForm.reset();
      document.getElementById('update_subject_id').value = subject_id;

      // 学科情報を取得してフォームに設定
      const materia = materias.find(m => m.subject_id === subject_id);
      if (materia) {
        document.getElementById('update_subject_name').value = materia.subject_name;
        document.getElementById('update_professor_id').value = materia.professor_id;
        document.getElementById('update_credit_hours').value = materia.credit_hours;
      }
    }

    // 学科を実際に更新
    document.getElementById('update-materia-form').addEventListener('submit', function (event) {
      event.preventDefault();
      const subject_id = document.getElementById('update_subject_id').value;
      const subject_name = document.getElementById('update_subject_name').value;
      const professor_id = document.getElementById('update_professor_id').value;
      const credit_hours = document.getElementById('update_credit_hours').value;

      fetch(`${apiUrl}/${subject_id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          subject_name,
          professor_id,
          credit_hours
        })
      })
        .then(response => response.json())
        .then(data => {
          getMaterias();
          document.getElementById('update-materia-form').reset();
        });
    });

    // 学科を削除
    function deleteMateria(subject_id) {
      fetch(`${apiUrl}/${subject_id}`, {
        method: 'DELETE'
      })
        .then(response => response.json())
        .then(data => getMaterias());
    }

    // 初期データの読み込み
    getMaterias();
  </script>

###データベース　スクリプト
-- Professorテーブルを作成
CREATE TABLE Professor (
    id_prof INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(255),
    email_consitucional VARCHAR(255),
    materia_leci VARCHAR(255),
    CPF VARCHAR(14),
    telefone VARCHAR(20),
    data_de_nascimento DATE,
    email_pess VARCHAR(255),
    endereco_completo TEXT
);

-- Disciplinaテーブルを作成
CREATE TABLE Disciplina (
    id_disciplina INT AUTO_INCREMENT PRIMARY KEY,
    disciplina VARCHAR(255),
    id_prof INT,
    FOREIGN KEY (id_prof) REFERENCES Professor(id_prof)
);




-- Professorテーブルにレコードを追加
INSERT INTO Professor (id_prof, nome, email_consitucional, materia_leci, CPF, telefone, data_de_nascimento, email_pess, endereco_completo) VALUES
(1, 'John Doe', 'john@example.com', 'Mathematics', '123.456.789-01', '(123) 456-7890', '1980-01-01', 'john_personal@example.com', '123 Main St'),
(2, 'Jane Smith', 'jane@example.com', 'Physics', '987.654.321-09', '(987) 654-3210', '1975-05-10', 'jane_personal@example.com', '456 Elm St'),
(3, 'Michael Johnson', 'michael@example.com', 'Chemistry', '456.789.012-34', '(456) 789-0123', '1990-12-15', 'michael_personal@example.com', '789 Oak St');

INSERT INTO Professor (id_prof, nome, email_consitucional, materia_leci, CPF, telefone, data_de_nascimento, email_pess, endereco_completo) VALUES (4, 'AAAAAAAAA', 'AAAAAAA@example.com', 'AAAAA', '999.999.999-99', '(456) 789-0123', '1990-12-15', 'AAAAAAAAAAAAl@example.com', '789 Oak St')

-- Disciplinaテーブルにレコードを追加
INSERT INTO Disciplina (id_disciplina, disciplina, id_prof) VALUES
(1, 'Algebra', 1),
(2, 'Quantum Mechanics', 2),
(3, 'Organic Chemistry', 3);





SELECT *
FROM Professor
JOIN Disciplina ON Professor.id_prof = Disciplina.id_prof;
